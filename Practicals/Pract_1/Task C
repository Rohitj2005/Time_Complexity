#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Comparator for qsort
int comp(const void *a, const void *b) {
    float fa = *(const float*)a;
    float fb = *(const float*)b;
    return (fa > fb) - (fa < fb);
}

void generateSortedData(float arr[], int n, float min, float max) {
    for (int i = 0; i < n; i++)
        arr[i] = min + ((float)rand() / RAND_MAX) * (max - min);
    qsort(arr, n, sizeof(float), comp);
}

int firstOccurrenceLinear(float arr[], int n, float val) {
    for (int i = 0; i < n; i++){
        if (arr[i] >= val){
            return i;
        }
    }       
    return -1;
}

int firstOccurrenceBinary(float arr[], int n, float val) {
    int left = 0, right = n - 1;
    int result = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] >= val) {
            result = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return result;
}

int main() {
    int n = 1000000;
    float temp[n];
    srand(time(0));
    generateSortedData(temp, n, 20, 50);

    clock_t start, end;
    double duration;
    int index;

    // Linear Search
    start = clock();
    index = firstOccurrenceLinear(temp, n, 30.0);
    end = clock();
    duration = ((double)(end - start)) / CLOCKS_PER_SEC;
    if (index != -1)
        printf("Linear Search:- \nFirst temp >= 30 at index %d, \nvalue = %.2f, Time = %lf s\n", index, temp[index], duration);

    // Binary Search
    start = clock();
    index = firstOccurrenceBinary(temp, n, 30.0);
    end = clock();
    duration = ((double)(end - start)) / CLOCKS_PER_SEC;
    if (index != -1)
        printf("Binary Search:- \nFirst temp >= 30 at index %d, \nvalue = %.2f, Time = %lf s\n", index, temp[index], duration);

    return 0;
}
